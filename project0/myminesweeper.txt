import itertools
import random


class Minesweeper():
    """
    Minesweeper game representation
    """

    def __init__(self, height=8, width=8, mines=8):

        # Set initial width, height, and number of mines
        self.height = height
        self.width = width
        self.mines = set()

        # Initialize an empty field with no mines
        self.board = []
        for i in range(self.height):
            row = []
            for j in range(self.width):
                row.append(False)
            self.board.append(row)

        # Add mines randomly
        while len(self.mines) != mines:
            i = random.randrange(height)
            j = random.randrange(width)
            if not self.board[i][j]:
                self.mines.add((i, j))
                self.board[i][j] = True

        # At first, player has found no mines
        self.mines_found = set()

    def print(self):
        """
        Prints a text-based representation
        of where mines are located.
        """
        for i in range(self.height):
            print("--" * self.width + "-")
            for j in range(self.width):
                if self.board[i][j]:
                    print("|X", end="")
                else:
                    print("| ", end="")
            print("|")
        print("--" * self.width + "-")

    def is_mine(self, cell):
        i, j = cell
        return self.board[i][j]

    def nearby_mines(self, cell):
        """
        Returns the number of mines that are
        within one row and column of a given cell,
        not including the cell itself.
        """

        # Keep count of nearby mines
        count = 0

        # Loop over all cells within one row and column
        for i in range(cell[0] - 1, cell[0] + 2):
            for j in range(cell[1] - 1, cell[1] + 2):

                # Ignore the cell itself
                if (i, j) == cell:
                    continue

                # Update count if cell in bounds and is mine
                if 0 <= i < self.height and 0 <= j < self.width:
                    if self.board[i][j]:
                        count += 1

        return count

    def won(self):
        """
        Checks if all mines have been flagged.
        """
        return self.mines_found == self.mines


class Sentence():
    """
    Logical statement about a Minesweeper game
    A sentence consists of a set of board cells,
    and a count of the number of those cells which are mines.
    """

    def __init__(self, cells, count):
        self.cells = set(cells)
        self.count = count

    def __eq__(self, other):
        return self.cells == other.cells and self.count == other.count

    def __str__(self):
        return f"{self.cells} = {self.count}"

    def known_mines(self):
        knownmines = set()
        if len(self.cells) == self.count:
            return self.cells
        for i in self.cells:
            if i in self.mines:
                knowmines.add(i)
        return knownmines        

    def known_safes(self):
        knownsafes = set()
        if self.count == 0:
            return self.cells
        for i in self.cells:
            if i not in self.mines:
                knownsafes.add(i)
        return knownsafes


    def mark_mine(self, cell):
       
        
        if cell in self.cells:
            self.count = self.count - 1
            self.cells.remove(cell)
                
    def mark_safe(self, cell):
                
        if cell in self.cells:
            self.cells.remove(cell)

class MinesweeperAI():
    """
    Minesweeper game player
    """

    def __init__(self, height=8, width=8):

        # Set initial height and width
        self.height = height
        self.width = width

        # Keep track of which cells have been clicked on
        self.moves_made = set()

        # Keep track of cells known to be safe or mines
        self.mines = set()
        self.safes = set()

        # List of sentences about the game known to be true
        self.knowledge = []

    def mark_mine(self, cell):
        """
        Marks a cell as a mine, and updates all knowledge
        to mark that cell as a mine as well.
        """
        self.mines.add(cell)
        for sentence in self.knowledge:
            sentence.mark_mine(cell)

    def mark_safe(self, cell):
        """
        Marks a cell as safe, and updates all knowledge
        to mark that cell as safe as well.
        """
        self.safes.add(cell)
        for sentence in self.knowledge:
            sentence.mark_safe(cell)

    def add_knowledge(self, cell, count):
        self.moves_made.add(cell)
        self.safes.add(cell)
        cellstoremove = []
        nearbycells = set()
        for i in range(cell[0] - 1, cell[0]+2):
            for j in range(cell[0] - 1, cell[0]+2):
                if j <= self.width and i <= self.height:
                    if j >= 0 and i >= 0:
                        newcell =(i,j)
                        if (newcell not in self.mines) and (newcell not in self.safes): 
                            nearbycells.add(newcell)
        
        newsentence = Sentence(nearbycells,count)
        self.knowledge.append(newsentence) 
        toremove = []
        newknowledge = []
        secondknowledge = []
        safestoberemoved = []
        minestoberemoved = []
        for i in self.knowledge:
            secondknowledge.append(i)   
        for sentence in secondknowledge:
            numofcells = 0
            for i in sentence.cells:
                numofcells = numofcells + 1

            if numofcells == count:
                
                for i in sentence.cells:
                    minestoberemoved.append(i)
                

            for sentence in secondknowledge:
            
                if count==0:
                    for i in sentence.cells:
                        safestoberemoved.append(i)
           
            for i in safestoberemoved:
                self.mark_safe(i)
            for i in minestoberemoved:
                self.mark_mine(i)
            a = 1
            while a != 0:
                for sent1 in self.knowledge:
                    for sent2 in self.knowledge:

                        if (sent1!=sent2) and sent1.cells != ():

                            if sent1.cells.issubset(sent2.cells):

                                cells3=list(sent2.cells-sent1.cells)

                                count3=sent2.count-sent1.count

                                sent3=Sentence(cells3,count3)

                                newknowledge.append(sent3)
                                toremove.append(sent2)
                                print("k")
                a = 0
            self.knowledge += newknowledge
            for i in toremove:
                if i not in self.knowledge:
                    self.knowledge.remove(i)
        
            
                        
                
    def make_safe_move(self):
        for i in self.safes:
            if i not in self.moves_made:
                return i
        return None



    def make_random_move(self):
        
        for i in range(0,self.height):
            for j in range(0,self.width):
                newcell = (i,j)
                if newcell not in self.moves_made:
                    if newcell not in self.mines:
                        return newcell
        return None
